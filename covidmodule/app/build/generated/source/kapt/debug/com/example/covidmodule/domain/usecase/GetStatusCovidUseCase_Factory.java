// Generated by Dagger (https://dagger.dev).
package com.example.covidmodule.domain.usecase;

import com.example.covidmodule.data.api.ICovidService;
import com.example.covidmodule.domain.mappers.StatusCovidMapper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetStatusCovidUseCase_Factory implements Factory<GetStatusCovidUseCase> {
  private final Provider<ICovidService> iCovidServiceProvider;

  private final Provider<StatusCovidMapper> statusCovidMapperProvider;

  public GetStatusCovidUseCase_Factory(Provider<ICovidService> iCovidServiceProvider,
      Provider<StatusCovidMapper> statusCovidMapperProvider) {
    this.iCovidServiceProvider = iCovidServiceProvider;
    this.statusCovidMapperProvider = statusCovidMapperProvider;
  }

  @Override
  public GetStatusCovidUseCase get() {
    return newInstance(iCovidServiceProvider.get(), statusCovidMapperProvider.get());
  }

  public static GetStatusCovidUseCase_Factory create(Provider<ICovidService> iCovidServiceProvider,
      Provider<StatusCovidMapper> statusCovidMapperProvider) {
    return new GetStatusCovidUseCase_Factory(iCovidServiceProvider, statusCovidMapperProvider);
  }

  public static GetStatusCovidUseCase newInstance(ICovidService ICovidService,
      StatusCovidMapper statusCovidMapper) {
    return new GetStatusCovidUseCase(ICovidService, statusCovidMapper);
  }
}
