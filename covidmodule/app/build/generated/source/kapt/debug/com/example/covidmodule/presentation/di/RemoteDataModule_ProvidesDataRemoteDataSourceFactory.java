// Generated by Dagger (https://dagger.dev).
package com.example.covidmodule.presentation.di;

import com.example.covidmodule.data.api.ICovidService;
import com.example.covidmodule.data.repository.DataRemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteDataModule_ProvidesDataRemoteDataSourceFactory implements Factory<DataRemoteDataSource> {
  private final RemoteDataModule module;

  private final Provider<ICovidService> iCovidServiceProvider;

  public RemoteDataModule_ProvidesDataRemoteDataSourceFactory(RemoteDataModule module,
      Provider<ICovidService> iCovidServiceProvider) {
    this.module = module;
    this.iCovidServiceProvider = iCovidServiceProvider;
  }

  @Override
  public DataRemoteDataSource get() {
    return providesDataRemoteDataSource(module, iCovidServiceProvider.get());
  }

  public static RemoteDataModule_ProvidesDataRemoteDataSourceFactory create(RemoteDataModule module,
      Provider<ICovidService> iCovidServiceProvider) {
    return new RemoteDataModule_ProvidesDataRemoteDataSourceFactory(module, iCovidServiceProvider);
  }

  public static DataRemoteDataSource providesDataRemoteDataSource(RemoteDataModule instance,
      ICovidService ICovidService) {
    return Preconditions.checkNotNullFromProvides(instance.providesDataRemoteDataSource(ICovidService));
  }
}
