// Generated by Dagger (https://dagger.dev).
package com.example.covidmodule.presentation.di;

import com.example.covidmodule.data.repository.DataRemoteDataSource;
import com.example.covidmodule.domain.repository.CovidRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideCovidRepositoryFactory implements Factory<CovidRepository> {
  private final RepositoryModule module;

  private final Provider<DataRemoteDataSource> dataRemoteDataSourceProvider;

  public RepositoryModule_ProvideCovidRepositoryFactory(RepositoryModule module,
      Provider<DataRemoteDataSource> dataRemoteDataSourceProvider) {
    this.module = module;
    this.dataRemoteDataSourceProvider = dataRemoteDataSourceProvider;
  }

  @Override
  public CovidRepository get() {
    return provideCovidRepository(module, dataRemoteDataSourceProvider.get());
  }

  public static RepositoryModule_ProvideCovidRepositoryFactory create(RepositoryModule module,
      Provider<DataRemoteDataSource> dataRemoteDataSourceProvider) {
    return new RepositoryModule_ProvideCovidRepositoryFactory(module, dataRemoteDataSourceProvider);
  }

  public static CovidRepository provideCovidRepository(RepositoryModule instance,
      DataRemoteDataSource dataRemoteDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideCovidRepository(dataRemoteDataSource));
  }
}
